package functionality;
import java.io.File;
import java.io.IOException;

import javax.swing.JOptionPane;

import GUI.CommentaryAdd;
import GUI.Mainframe;

/**
 * Func
 * @author idaknow
 *
 */
public class Merge {

	private String name;
	private String extension;
	private boolean acceptableName;
	private boolean isVideo;
	private String text;
	private boolean isEdit;

	public Merge(String name, boolean isVideo, String text, boolean isEdit){
		acceptableName = true;
		this.name = name;
		this.isVideo = isVideo;
		this.text = text;
		this.isEdit = isEdit;
	}

	public void start(){

		nameWithExtensions(name);// checks if the new mp3 name has extension .mp3

		nameCheck();
		if (acceptableName){// if the name isn't null or already exists
			if (isVideo){
				videoMerge();
			}else {
				commentaryMerge();
			}
		}

	}

	protected void commentaryMerge(){
		String commentary = "echo "+ "\"" + text + "\"";
		//check how name file
		ProcessBuilder pb1 = new ProcessBuilder("/bin/bash","-c", commentary + " > ."+name+".txt");// creates/ overwrites a temp hidden file with commentary in
		//creates mp3 file using commentary file (above)
		ProcessBuilder pb = new ProcessBuilder("/bin/bash", "-c","text2wave ."+name+".txt -o " + name + extension);
		try {
			Process p1 = pb1.start();
			p1.waitFor();
			Process p = pb.start();
			// add loading popup here
			p.waitFor();
			// closes popup here
		} catch (IOException | InterruptedException e1) {
			e1.printStackTrace();
		}
	}

	protected void videoMerge(){
		//delete's audio off actual video
		//add a pop up to check if you want to actually strip it
		//int cmd = JOptionPane.showConfirmDialog(this, "Do you want to remove video audio?");
		String cmd1 = "ffmpeg -i " + Mainframe.getVideoSourcePath() + " -an .vid.avi";
		ProcessBuilder pb1 = new ProcessBuilder("/bin/bash", "-c", cmd1);

		try {
			pb1.start();
		} catch (IOException e1) { e1.printStackTrace(); }
		GUI.Mainframe.setVideoSource(".vid.avi"); // new audio-less video

		String videoPath = null;
		videoPath = System.getProperty("user.dir") + "/" +name + extension;

		// need to loop somehow
		// ffmpeg -y -i a.mp4 -itsoffset 00:00:30 sng.m4a -map 0:0 -map 1:0 -c:v copy -preset ultrafast -async 1 out.mp4
		//merges audio & video
		String cmd2 = "ffmpeg -i " + Mainframe.getVideoSourcePath() + " -i " + Mainframe.getAudioSourcePath() + " " + videoPath/* + userVideoName + extension*/; //combines the video and audio
		ProcessBuilder pb2 = new ProcessBuilder("/bin/bash", "-c", cmd2);
		try {
			Process p2 = pb2.start();
			errorMessage("Loading video, please wait");// popup here
			p2.waitFor(); // waits for process to be finished
			errorMessage("Finished merge, video is now playing");// popup here

			// closes popup here
		} catch (IOException | InterruptedException e1) { e1.printStackTrace(); }

		//close all windows
		Mainframe.setVideoSource(videoPath/* + userVideoName + extension*/);
		Mainframe.changeVideo();
	}

	private void nameCheck(){
		File f = new File(name + extension);// temporary file created
		if (!checkForSpaces(name)){ // checks the name doesn't contain spaces & isn't null
			errorMessage("Filename can't contain spaces");
			acceptableName = false;
		} else if (f.exists()) { // check file name doesn't already exist
			if (CommentaryAdd.isEdit){
				f.delete();
				acceptableName = true;
			} else {
				errorMessage("This filename already exists");
				acceptableName = false;
			}
		} else { // name doesn't exist and passed checkForSpaces
			acceptableName = true;
		}
	}

	/**
	 * Checks that a video/ audio name that user inputs contains and avi or mp4 extension
	 *
	 * Checks that a video/ audio name that user inputs contains a mp3 extension
	 * If it does, this won't create a file that is double .mp3.mp3
	 */
	protected void nameWithExtensions(String s){
		if (isVideo){
			extension = ".mp4";
			if (s.endsWith(".avi")){
				extension = "";
			} else if (s.endsWith(".mp4")){
				extension = "";
			}
		} else {
			extension = ".mp3";
			if (!isEdit){
				if (s.endsWith(".mp3")){
					extension = "";
				}
			} else {
				int i = name.indexOf(".mp3");
				name = name.substring(0,i);
			}
		}
	}

	/**
	 * Checks if video/ audio name contains a space/ tab character
	 */
	protected static boolean checkForSpaces(String s){
		if (s == null| s.contains(" ") | s.contains("\t")){
			return false;
		}
		return true;
	}

	/**
	 * Launches an error message pop up to tell them of a specified string error
	 */
	public void errorMessage(String error){
		JOptionPane.showMessageDialog(null, this, error, 0);
	}

}
