package functionality;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

import GUI.Mainframe;

import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;

public class videoSliderBar {

	JSlider vsb;
	private final ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();

	public videoSliderBar(JSlider vsb){
		this.vsb = vsb;
	}
	public void update(){
		executorService.scheduleAtFixedRate(new UpdateRunnable(GUI.Mainframe.getMp()), 0L, 1L, TimeUnit.SECONDS);
	}
	private final class UpdateRunnable implements Runnable {

		private final EmbeddedMediaPlayer mp;

		private UpdateRunnable(EmbeddedMediaPlayer mp) {
			this.mp = mp;
		}

		@Override
		public void run() {
			final long time = mp.getTime();
			final int position = (int)(mp.getPosition() * 1000.0f);

			// Updates to user interface components must be executed on the Event
			// Dispatch Thread
			SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					if(mp.isPlaying()) {
						updateTime(time);
						updatePosition(position);
					}
				}
			});
		}
	}

	public String updateTime(long millis){
		String s = String.format("%02d:%02d:%02d", TimeUnit.MILLISECONDS.toHours(millis), TimeUnit.MILLISECONDS.toMinutes(millis) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(millis)), TimeUnit.MILLISECONDS.toSeconds(millis) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis)));
		return s;
	}

	private void updatePosition(int value){
		vsb.setValue(value);
	}

	/**
	 * Broken out position setting, handles updating mediaPlayer
	 */
	public void setSliderBasedPosition() {
		EmbeddedMediaPlayer mp = Mainframe.getMp();
		if(!mp.isSeekable()) {
			return;
		}
		float positionValue = vsb.getValue() / 1000.0f;
		// Avoid end of file freeze-up
		if(positionValue > 0.99f) {
			positionValue = 0.99f;
		}
		mp.setPosition(positionValue);
	}

	public void updateUIState() {
		EmbeddedMediaPlayer mp = Mainframe.getMp();
		if(!mp.isPlaying()) {
			// Resume play or play a few frames then pause to show current position in video
			mp.play();
			if(!GUI.Mainframe.getMousePressedPlaying()) {
				try {
					// Half a second probably gets an iframe
					Thread.sleep(500);
				}
				catch(InterruptedException e) {
					// Don't care if unblocked early
				}
				mp.pause();
			}
		}
		long time = mp.getTime();
		int position = (int)(mp.getPosition() * 1000.0f);
		updateTime(time);
		updatePosition(position);
	}

	public float audioLength(String filename) throws UnsupportedAudioFileException, IOException{
		File file = new File(filename);
		AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(file);
		AudioFormat format = audioInputStream.getFormat();
		long audioFileLength = file.length();
		int frameSize = format.getFrameSize();
		float frameRate = format.getFrameRate();
		return (audioFileLength / (frameSize * frameRate));
	}

}
