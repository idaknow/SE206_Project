package GUI;

import java.awt.Canvas;
import java.awt.CardLayout;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;

import java.awt.BorderLayout;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JButton;

import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.ActionEvent;

import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JSlider;
import javax.swing.JTable;

import uk.co.caprica.vlcj.player.MediaPlayerFactory;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import functionality.*;

import java.awt.Color;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.List;

import javax.swing.JTextPane;

import java.awt.Font;
import java.awt.FlowLayout;

public class Mainframe extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private JButton playbutton, pausebutton, ffdbutton, rwdbutton, mp3Selectbtn, videoSelectbtn, mutebutton;
	private JSlider volSlider;
	private static EmbeddedMediaPlayer mp;
	static String video;
	private static String audio;
	protected static boolean ffd = false;
	protected static boolean rwd = true;
	protected int videoLength;
	final public ImageIcon rwd_Icon = new ImageIcon(getClass().getResource("/btnImages/rw.png"));
	final public ImageIcon ffd_Icon = new ImageIcon(getClass().getResource("/btnImages/ffd.png"));
	final public ImageIcon mute_Icon = new ImageIcon(getClass().getResource("/btnImages/mute.png"));
	final public ImageIcon play_Icon = new ImageIcon(getClass().getResource("/btnImages/play.png"));
	final public ImageIcon pause_Icon = new ImageIcon(getClass().getResource("/btnImages/pause.png"));
	final public ImageIcon vol_Icon = new ImageIcon(getClass().getResource("/btnImages/vol.png"));
	private static JSlider videoSlider;
	private JPanel rightEditPanel;
	private JPanel topAudioBtns;
	private JPanel bottomAudioBtns;
	private static JLabel lblVideo;
	private JButton btnNewButton;
	private JScrollPane scrollPane;
	private JButton btnAddSelectedAudio;
	private JButton btnSeeAllAudio;
	private JButton btnPrevAllAudio;
	private JPanel audioListPanel;
	private static JList audioListChoose;
	private static JTable audioListCurrentAdded;
	private static DefaultListModel<String> model_1;
	private static DefaultListModel<String[]> model_2;
	private JButton btnRemove;
	private JLabel lblSelectedAudio;
	private JButton openEditedAudio;
	// private JSlider videoSlider;
	private JPanel playBtnPanel;
	private JPanel sliderPanel;
	private CardLayout currentCard;

	/**
	 * Initialize the contents of the frame.
	 */
	public Mainframe() {

		// Creates the main JFrame
		JFrame frame = new JFrame("mainAp");
		frame.setTitle("VIDIVOX : BY IDA");
		frame.setLocation(100, 100);
		frame.setSize(1200, 600);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);

		// creates main media player factory with canvas
		MediaPlayerFactory mpf = new MediaPlayerFactory();
		Canvas c = new Canvas();
		c.setBackground(Color.black);
		c.setBounds(100, 300, 800, 300);
		// creates panel that you put the video(canvas & factory) on
		JPanel mediaPanel = new JPanel();
		mediaPanel.setLayout(new BorderLayout());
		mediaPanel.add(c, BorderLayout.WEST);
		mediaPanel.setBounds(100, 300, 800, 300);
		frame.getContentPane().add(mediaPanel, BorderLayout.CENTER);

		rightEditPanel = new JPanel();
		mediaPanel.add(rightEditPanel);
		rightEditPanel.setLayout(new BorderLayout(0, 0));

		rightEditPanel = new JPanel();
		mediaPanel.add(rightEditPanel);
		rightEditPanel.setLayout(new BorderLayout(0, 0));

		topAudioBtns = new JPanel();
		rightEditPanel.add(topAudioBtns, BorderLayout.NORTH);
		topAudioBtns.setLayout(new BorderLayout(0, 0));

		lblVideo = new JLabel("VIDEO: ");
		topAudioBtns.add(lblVideo, BorderLayout.NORTH);

		btnNewButton = new JButton("OPEN/ CREATE/ EDIT AUDIO");
		btnNewButton.setFont(new Font("Tahoma", Font.BOLD, 16));
		btnNewButton.addActionListener(new ActionListener() {
			MediaSelection ms = new MediaSelection(false);

			public void actionPerformed(ActionEvent e) {
				if (getMp().isPlaying()) {
					getMp().pause();
				}
				if (Mainframe.getVideoSource() == null) {
					new ChooseAudioTypeFrame();
				} else if (!ms.isMSOpen) {
					ms.start(false);
				} else if (ms.isMSOpen) {
					ms.BringToFront();
				}
			}
		});
		topAudioBtns.add(btnNewButton, BorderLayout.SOUTH);

		bottomAudioBtns = new JPanel();
		rightEditPanel.add(bottomAudioBtns, BorderLayout.SOUTH);
		bottomAudioBtns.setLayout(new BorderLayout(0, 0));

		btnAddSelectedAudio = new JButton("Add audio");
		btnAddSelectedAudio.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// select a
				if (btnAddSelectedAudio.getText() == "Add audio") {
					// pop up
					if (mp.isPlaying()) {
						mp.pause();
					}
					int time = (int) mp.getTime();
					if (JOptionPane.showConfirmDialog(audioListPanel,
							"Do you want to add audio file '" + "name" + "' to this video at current movie time ("
									+ time + ")",
							"Add Audio to video", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
						addToTable((int) mp.getTime(), 0, lblSelectedAudio.getText());
						// change panel
						//
					} else {
						//
					}
				} else {

				}
			}
		});
		bottomAudioBtns.add(btnAddSelectedAudio, BorderLayout.CENTER);

		btnRemove = new JButton("Remove audio");
		btnRemove.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// if certain layout
				String selectedAudio = lblSelectedAudio.getText();
				if (openEditedAudio.getText() == "Display edits") {
					int i = model_1.indexOf(selectedAudio);
					if (i >= 0) {
						model_1.removeElementAt(i);
					}
				} else {
					DefaultTableModel dtm = (DefaultTableModel) audioListCurrentAdded.getModel();
					for (int i = 0; i < dtm.getRowCount(); i++) {
						if (selectedAudio == dtm.getValueAt(i, 2)) {
							dtm.removeRow(i);
							i = dtm.getRowCount();
						}
					}
				}
				// if other table
			}
		});
		bottomAudioBtns.add(btnRemove, BorderLayout.WEST);

		lblSelectedAudio = new JLabel("Select an audio, the name will display here");
		bottomAudioBtns.add(lblSelectedAudio, BorderLayout.NORTH);

		openEditedAudio = new JButton("Display edits");
		openEditedAudio.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e1) {
				// needed to add a change here ahhh I can't remember
				//selected audio lbl change
				lblSelectedAudio.setText("Select an audio, the name will display here");
				CardLayout c = (CardLayout) audioListPanel.getLayout();
				if (openEditedAudio.getText().equals("Display edits")) {
					c.show(audioListPanel, "current added audio");
					openEditedAudio.setText("Back");
					btnAddSelectedAudio.setText("Preview sound");
				} else {
					c.show(audioListPanel, "audioList");
					openEditedAudio.setText("Display edits");
					btnAddSelectedAudio.setText("Add audio");
				}
			}
		});
		bottomAudioBtns.add(openEditedAudio, BorderLayout.EAST);

		scrollPane = new JScrollPane();
		rightEditPanel.add(scrollPane, BorderLayout.EAST);

		audioListPanel = new JPanel();
		rightEditPanel.add(audioListPanel, BorderLayout.CENTER);
		audioListPanel.setLayout(new CardLayout(0, 0));

		audioListChoose = new JList();
		model_1 = new DefaultListModel();
		audioListChoose.setModel(model_1);
		audioListPanel.add(audioListChoose, "audioList");
		audioListChoose.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				if (!model_1.isEmpty()) {
					JList jl = (JList) arg0.getSource();
					int i = jl.locationToIndex(arg0.getPoint());
					if (i >= 0) {
						Object o = jl.getModel().getElementAt(i);
						lblSelectedAudio.setText(o.toString());
					}
				}
			}
		});

		JScrollPane scrollPane_1 = new JScrollPane();

		audioListCurrentAdded = new JTable();

		audioListCurrentAdded.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		audioListCurrentAdded.setFillsViewportHeight(true);
		audioListCurrentAdded.setModel(new DefaultTableModel(new String[] { "Time", "Total Time", "Name" }, 0));
		scrollPane_1.setViewportView(audioListCurrentAdded);

		audioListCurrentAdded.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg1) {
				JTable jl = (JTable) arg1.getSource();
				int i = jl.rowAtPoint(arg1.getPoint());
				if (i >= 0) {
					if (jl.getValueAt(i, 2) != null) {
						String value = jl.getValueAt(i, 2).toString();
						if (value != null) {
							lblSelectedAudio.setText(value);
						}
					}
				}
			}

		});
		audioListPanel.add(audioListCurrentAdded, "current added audio");
		audioListPanel.add(scrollPane_1);

		// PANEL FOR ALL SOUTH BUTTONS (PLAY, PAUSE, RW, FFD, MUTE, VOL SLIDER)
		JPanel bottomBtnPanel = new JPanel();
		bottomBtnPanel.setBounds(100, 900, 105, 200);
		frame.getContentPane().add(bottomBtnPanel, BorderLayout.SOUTH);
		bottomBtnPanel.setBackground(Color.black);
		// PANEL FOR ADDED AUDIO AND VIDEO AT NORTH
		JPanel topMediaBtnPanel = new JPanel();
		topMediaBtnPanel.setBounds(200, 1900, 105, 200);
		frame.getContentPane().add(topMediaBtnPanel, BorderLayout.NORTH);
		topMediaBtnPanel.setBackground(Color.black);
		bottomBtnPanel.setLayout(new BorderLayout(0, 0));

		// __________________________________________________________________________
		// VIDEO SLIDER INITIALIZED
		videoSlider = new JSlider();
		// System.out.println(videoSlider.getValue());

		videoSlider.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if (mp != null) {

				}
			}
		});
		videoSlider.setValue(0);
		bottomBtnPanel.add(videoSlider, BorderLayout.NORTH);

		playBtnPanel = new JPanel();
		bottomBtnPanel.add(playBtnPanel, BorderLayout.WEST);
		playBtnPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));

		// __________________________________________________________________________
		// REWIND BUTTON
		rwdbutton = new JButton();
		rwdbutton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Rewind.checkStatus();
			}
		});
		rwdbutton.setIcon(rwd_Icon);
		playBtnPanel.add(rwdbutton);

		// __________________________________________________________________________
		// PLAY BUTTON
		playbutton = new JButton();
		playbutton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// boolean once chosen a new video we have a boolean so that it
				if (!getMp().isPlaying()) {
					if (getMp() != null) { // checks video exists and mp is
											// initialized correctly
						getMp().setRate((float) 1); // set normal rate (incase
													// ffwding)
						Rewind.checkPlay();
					}
				} else { // if the video is playing
					if (getMp() != null) {
						getMp().start();
						getMp().setRate((float) 1); // set normal rate (incase
													// ffwding)
						Rewind.checkPlay();
					}
				}
			}
		});
		playbutton.setIcon(play_Icon);
		playBtnPanel.add(playbutton);

		// __________________________________________________________________________
		// PAUSE BUTTON
		pausebutton = new JButton();
		pausebutton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				getMp().pause();
			}
		});
		pausebutton.setIcon(pause_Icon);
		playBtnPanel.add(pausebutton);

		// __________________________________________________________________________
		// FAST FORWARD BUTTON
		ffdbutton = new JButton();
		ffdbutton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (ffd) {
					ffd = false;
					getMp().setRate((float) 1);
				} else {
					ffd = true;
					getMp().setRate((float) 10);
				}
			};
		});
		ffdbutton.setIcon(ffd_Icon);
		playBtnPanel.add(ffdbutton);

		// __________________________________________________________________________
		// MUTE BUTTON
		mutebutton = new JButton();
		mutebutton.addActionListener(new ActionListener() {
			int sliderValue = 50;

			public void actionPerformed(ActionEvent e) {
				if (getMp().isMute()) {
					mutebutton.setIcon(mute_Icon);
					volSlider.setValue(sliderValue);
				} else {
					mutebutton.setIcon(vol_Icon);
					sliderValue = getMp().getVolume();
					volSlider.setValue(0);
				}
				getMp().mute();
			}
		});
		mutebutton.setIcon(mute_Icon);
		playBtnPanel.add(mutebutton);

		// __________________________________________________________________________
		// VOLUME SLIDER
		volSlider = new JSlider();
		volSlider.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				getMp().setVolume(volSlider.getValue());
				mutebutton.setIcon(mute_Icon);
			}
		});
		playBtnPanel.add(volSlider);

		// creates media player where video is played on
		setMp(mpf.newEmbeddedMediaPlayer());
		getMp().setVideoSurface(mpf.newVideoSurface(c));
		// mp.playMedia("big_buck_bunny_1_minute.avi"); // this is used so when
		// testing we don't have to rechoose the video every time

		btnSeeAllAudio = new JButton("Save new video");
		bottomBtnPanel.add(btnSeeAllAudio, BorderLayout.EAST);
		btnSeeAllAudio.setFont(new Font("Tahoma", Font.BOLD, 16));

		btnPrevAllAudio = new JButton("Preview all");
		bottomBtnPanel.add(btnPrevAllAudio, BorderLayout.CENTER);
		btnPrevAllAudio.setFont(new Font("Tahoma", Font.BOLD, 16));

		// sliderPanel = new JPanel();
		// bottomBtnPanel.add(sliderPanel, BorderLayout.CENTER);

		// __________________________________________________________________________
		// VIDEO SELECT TO PLAY BUTTON
		videoSelectbtn = new JButton("ADD VIDEO");
		videoSelectbtn.setFont(new Font("Tahoma", Font.BOLD, 18));
		videoSelectbtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				MediaSelection ms = new MediaSelection(true);
				getMp().pause();
				ms.actionPerformed(e);
			}
		});
		topMediaBtnPanel.setLayout(new GridLayout(0, 2, 0, 0));
		topMediaBtnPanel.add(videoSelectbtn);

		mp3Selectbtn = new JButton("OPEN EDITED VIDEO PROJECT");
		mp3Selectbtn.setFont(new Font("Tahoma", Font.BOLD, 18));
		mp3Selectbtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			}
		});
		mp3Selectbtn.setBounds(503, 12, 500, 25);
		topMediaBtnPanel.add(mp3Selectbtn);
	}

	/**
	 * Set's video as the input String s from other classes
	 */
	public static void setVideoSource(String string) {
		video = string;
	}

	/**
	 * Set's audio as the input String s from other classes
	 */
	public static void setAudioSource(String s) {
		audio = s;
	}

	/**
	 * Changes the current video media being played
	 */
	public static void changeVideo() {
		getMp().playMedia(video);
		lblVideo.setText("VIDEO : " + video);
		videoSlider.setMaximum((int) getMp().getLength());
		videoSlider.setValue(0);
	}

	/**
	 * returns the current video
	 */
	public static String getVideoSource() {
		return video;
	}

	/**
	 * returns the current audio
	 */
	public static String getAudioSource() {
		return audio;
	}

	public static boolean getRwd() {
		return rwd;
	}

	public static void setRwd(boolean rw) {
		rwd = rw;
	}

	public static void setFastForward(boolean fwd) {
		ffd = fwd;
	}

	public static EmbeddedMediaPlayer getMp() {
		return mp;
	}

	public static void setMp(EmbeddedMediaPlayer mp) {
		Mainframe.mp = mp;
	}

	public static void addToList1(String audioName) {
		if (!model_1.contains(audioName)) {
			model_1.addElement(audioName);
		}
	}

	public static void addToTable(int timeEntered, int totalLength, String name) {
		// check not invalid time
		if (timeEntered + totalLength < mp.getLength()) {
			Object[] newRow = { Integer.toString(timeEntered), Integer.toString(totalLength), name };
			DefaultTableModel model = (DefaultTableModel) audioListCurrentAdded.getModel();
			model.addRow(newRow);
		} else {
			// error message
		}
	}

}
