import java.awt.Canvas;

import javax.swing.JFrame;
import javax.swing.JLabel;

import java.awt.BorderLayout;

import javax.swing.JPanel;
import javax.swing.JButton;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import javax.swing.ImageIcon;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
/*import uk.co.caprica.vlcj.binding.LibVlc;
import uk.co.caprica.vlcj.player.MediaPlayerFactory;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;
import uk.co.caprica.vlcj.runtime.RuntimeUtil;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;*/
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.List;

import javax.swing.JTextPane;

import java.awt.Font;

import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JList;
import javax.swing.BoxLayout;
import java.awt.FlowLayout;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.RowSpec;
import com.jgoodies.forms.layout.FormSpecs;
import javax.swing.JProgressBar;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JTextField;
import javax.swing.SpringLayout;
import java.awt.CardLayout;
import net.miginfocom.swing.MigLayout;
import javax.swing.JScrollPane;


public class Mainframe extends JFrame {

	private JButton playbutton, pausebutton, ffdbutton, rwdbutton, mp3Selectbtn, videoSelectbtn, mutebutton;
	private JSlider slider;
	protected JFrame psmp3;
	protected JPanel pscontentPane;
	//protected static EmbeddedMediaPlayer mp;
	static String video;
	private static String audio;
	protected boolean ffd = false;
	protected boolean rwd = true;
	protected Rewind r = null;
	final public ImageIcon rwd_Icon = new ImageIcon(getClass().getResource("/res/rw.png"));
	final public ImageIcon ffd_Icon = new ImageIcon(getClass().getResource("/res/ffd.png"));
	final public ImageIcon mute_Icon = new ImageIcon(getClass().getResource("/res/mute.png"));
	final public ImageIcon play_Icon = new ImageIcon(getClass().getResource("/res/play.png"));
	final public ImageIcon pause_Icon = new ImageIcon(getClass().getResource("/res/pause.png"));
	final public ImageIcon vol_Icon = new ImageIcon(getClass().getResource("/res/vol.png"));
	private JPanel panel;
	private JPanel panel_1;
	private JPanel panel_2;
	private JLabel lblVideo;
	private JButton btnNewButton;
	private JScrollPane scrollPane;
	private JButton btnAddSelectedAudio;
	private JButton btnSeeAllAudio;
	private JPanel panel_3;
	private JList list;
	private JList list_1;
	private JButton btnRemove;
	private JLabel lblSelectedAudio;
	private JButton btnNewButton_1;
	private JSlider slider_1;
	private JPanel panel_4;
	private JPanel panel_5;
	/**
	 * Launch the main application.
	 */
	public static void main(final String[] args) {
		/*NativeLibrary.addSearchPath(
				RuntimeUtil.getLibVlcLibraryName(), "/Applications/vlc-2.0.0/VLC.app/Contents/MacOS/lib"
				);
		Native.loadLibrary(RuntimeUtil.getLibVlcLibraryName(), LibVlc.class);*/

		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				new Mainframe(null);
			}
		});
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private Mainframe(String[] args) {

		//Creates the main JFrame
		JFrame frame = new JFrame("mainAp");
		frame.setTitle("VIDIVOX");
		frame.setLocation(100,100);
		frame.setSize(1200,600);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);

		//creates main media player factory with canvas
		//MediaPlayerFactory mpf = new MediaPlayerFactory();
		Canvas c = new Canvas();
		c.setBackground(Color.black);
		c.setBounds(100,300,800,300);
		//creates panel that you put the video(canvas & factory) on
		JPanel mediaPanel = new JPanel();
		mediaPanel.setLayout(new BoxLayout(mediaPanel, BoxLayout.X_AXIS));
		mediaPanel.add(c);
		mediaPanel.setBounds(100,300,800,300);
		frame.getContentPane().add(mediaPanel, BorderLayout.CENTER);
		
		panel = new JPanel();
		mediaPanel.add(panel);
		panel.setLayout(new BorderLayout(0, 0));
		
		panel_1 = new JPanel();
		panel.add(panel_1, BorderLayout.NORTH);
		panel_1.setLayout(new BorderLayout(0, 0));
		
		lblVideo = new JLabel("VIDEO: ___");
		panel_1.add(lblVideo, BorderLayout.NORTH);
		
		btnNewButton = new JButton("OPEN/ CREATE/ EDIT AUDIO");
		btnNewButton.setFont(new Font("Tahoma", Font.BOLD, 16));
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			}
		});
		panel_1.add(btnNewButton, BorderLayout.SOUTH);
		
		panel_2 = new JPanel();
		panel.add(panel_2, BorderLayout.SOUTH);
		panel_2.setLayout(new BorderLayout(0, 0));
		
		btnAddSelectedAudio = new JButton("Add audio");
		btnAddSelectedAudio.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			}
		});
		panel_2.add(btnAddSelectedAudio, BorderLayout.WEST);
		
		btnRemove = new JButton("See all audio edits");
		btnRemove.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			}
		});
		panel_2.add(btnRemove, BorderLayout.EAST);
		
		lblSelectedAudio = new JLabel("Selected audio: ___");
		panel_2.add(lblSelectedAudio, BorderLayout.NORTH);
		
		btnNewButton_1 = new JButton("Remove audio");
		panel_2.add(btnNewButton_1, BorderLayout.CENTER);
		
		scrollPane = new JScrollPane();
		panel.add(scrollPane, BorderLayout.EAST);
		
		panel_3 = new JPanel();
		panel.add(panel_3, BorderLayout.CENTER);
		panel_3.setLayout(new CardLayout(0, 0));
		
		list = new JList();
		panel_3.add(list, "name_62040678818343");
		
		list_1 = new JList();
		panel_3.add(list_1, "name_62055679856209");
		
		//PANEL FOR ALL SOUTH BUTTONS (PLAY, PAUSE, RW, FFD, MUTE, VOL SLIDER)
		JPanel btnPanel = new JPanel();
		btnPanel.setBounds(100,900,105,200);
		frame.getContentPane().add(btnPanel, BorderLayout.SOUTH);
		btnPanel.setBackground(Color.black);
		//PANEL FOR ADDED AUDIO AND VIDEO AT NORTH
		JPanel topMediaBtnPanel = new JPanel();
		topMediaBtnPanel.setBounds(200,1900,105,200);
		frame.getContentPane().add(topMediaBtnPanel, BorderLayout.NORTH);
		topMediaBtnPanel.setBackground(Color.black);
								btnPanel.setLayout(new BorderLayout(0, 0));
								
								slider_1 = new JSlider();
								btnPanel.add(slider_1, BorderLayout.NORTH);
								
								panel_4 = new JPanel();
								btnPanel.add(panel_4, BorderLayout.WEST);
																		panel_4.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
																
																		//creates media player where video is played on
																		//mp = mpf.newEmbeddedMediaPlayer();
																		//mp.setVideoSurface(mpf.newVideoSurface(c));
																		//mp.playMedia("big_buck_bunny_1_minute.avi"); // this is used so when testing we don't have to rechoose the video every time
																
																		//__________________________________________________________________________ REWIND BUTTON
																		rwdbutton = new JButton();
																		panel_4.add(rwdbutton);
																		rwdbutton.addActionListener(new ActionListener() { //GLITCHY AF
																			public void actionPerformed(ActionEvent e) {
																				if (rwd){ // checks if clicked rwd button when video is playing/ paused
																					r = new Rewind(rwd); // creates a rewind process
																					r.execute(); // starts process, continued till cancelled or done
																					rwd = false;
																				} else { // stopping rewind
																					if (r != null){ // checks that there is a rewind process happeneing
																						r.cancel(true); // cancels existing rewind process
																					}
																					r = null; // sets rewind process to non-existant
																					rwd = true; // so next time rwd clicks will be true
																				}
																			}
																		});
																		rwdbutton.setIcon(rwd_Icon);
																
																		//__________________________________________________________________________ PLAY BUTTON
																		playbutton = new JButton();
																		panel_4.add(playbutton);
																		playbutton.addActionListener(new ActionListener() {
																			public void actionPerformed(ActionEvent e) {
																				//boolean once chosen a new video we have a boolean so that it 
																				/*if (!mp.isPlaying()){
																					if (mp != null){ // checks video exists and mp is initialized correctly
																						mp.setRate((float) 1); // set normal rate (incase ffwding)
																						
																						if (r!=null){ // checks rewind process is happening, if it is cancels it (like in rewind button)
																							r.cancel(true);
																							r = null;
																							rwd = true;
																						} else {
																							mp.play();
																						}
																						ffd = false;
																					}
																				} else { // if the video is playing
																					if (mp != null){
																						mp.start();
																						mp.setRate((float) 1); // set normal rate (incase ffwding)
																						
																						if (r!=null){ // checks rewind process is happening, if it is cancels it (like in rewind button)
																							r.cancel(true);
																							r = null;
																							rwd = true;
																						} else {
																							mp.play();
																						}
																						ffd = false;
																						
																					}
																				}*/
																			}
																		});
																		playbutton.setIcon(play_Icon);
																
																		//__________________________________________________________________________ PAUSE BUTTON
																		pausebutton = new JButton();
																		panel_4.add(pausebutton);
																		pausebutton.addActionListener(new ActionListener() {
																			public void actionPerformed(ActionEvent e) {
																				//mp.pause();
																			}
																		});
																		pausebutton.setIcon(pause_Icon);
														
																//__________________________________________________________________________ FAST FORWARD BUTTON
																ffdbutton = new JButton();
																panel_4.add(ffdbutton);
																ffdbutton.addActionListener(new ActionListener() { 
																	@Override
																	public void actionPerformed(ActionEvent e) {
																		if (ffd){
																			ffd = false;
																			//mp.setRate((float) 1);
																		}else {
																			ffd = true;
																			//mp.setRate((float) 10);
																		}
																	};
																});
																ffdbutton.setIcon(ffd_Icon);
										
												//__________________________________________________________________________ MUTE BUTTON
												mutebutton = new JButton();
												panel_4.add(mutebutton);
												mutebutton.setIcon(mute_Icon);
												mutebutton.addActionListener(new ActionListener() {
													int sliderValue = 50;
													public void actionPerformed(ActionEvent e) {
														/*if (mp.isMute()){
															mutebutton.setIcon(mute_Icon);
															slider.setValue(sliderValue);
														} else {
															mutebutton.setIcon(vol_Icon);
															sliderValue = mp.getVolume();
															slider.setValue(0);
														}
														mp.mute();*/
													}
												});
										//__________________________________________________________________________ VOLUME SLIDER
										slider = new JSlider();
										panel_4.add(slider);
										
										btnSeeAllAudio = new JButton("Save new video");
										btnPanel.add(btnSeeAllAudio, BorderLayout.EAST);
										btnSeeAllAudio.setFont(new Font("Tahoma", Font.BOLD, 16));
										
										panel_5 = new JPanel();
										btnPanel.add(panel_5, BorderLayout.CENTER);
										slider.addChangeListener(new ChangeListener() {
											public void stateChanged(ChangeEvent e) {
												//mp.setVolume(slider.getValue());
											}
										});

		//__________________________________________________________________________ VIDEO SELECT TO PLAY BUTTON
		videoSelectbtn = new JButton("ADD VIDEO");
		videoSelectbtn.setFont(new Font("Tahoma", Font.BOLD, 18));
		videoSelectbtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//MediaSelection ms = new MediaSelection(true);
				//mp.pause();
				//ms.actionPerformed(e);
			}
		});
		topMediaBtnPanel.setLayout(new GridLayout(0, 2, 0, 0));
		topMediaBtnPanel.add(videoSelectbtn);

		//__________________________________________________________________________ AUDIO SELECT TO PLAY BUTTON
		mp3Selectbtn = new JButton("OPEN EDITED VIDEO PROJECT");
		mp3Selectbtn.setFont(new Font("Tahoma", Font.BOLD, 18));
		mp3Selectbtn.addActionListener(new ActionListener() {
			//MediaSelection ms = new MediaSelection(false);
			public void actionPerformed(ActionEvent e) {
				//mp.pause();
				if (Mainframe.getVideoSource() == null){
					psmp3 = new JFrame();
					psmp3.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
					psmp3.setBounds(500, 170, 200, 170);
					pscontentPane = new JPanel();
					pscontentPane.setBorder(new EmptyBorder(0, 0, 5, 5));
					psmp3.setContentPane(pscontentPane);
					pscontentPane.setLayout(null);

					JLabel lblA = new JLabel("Please select a video file");
					lblA.setBounds(12, 43, 426, 31);
					pscontentPane.add(lblA);
					psmp3.setVisible(true);

					JButton btnOK = new JButton("OK");
					btnOK.setBounds(40, 100, 117, 25);
					btnOK.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
							psmp3.setVisible(false);
						}
					});
					psmp3.getContentPane().add(btnOK);
				}/* else if (!ms.isMSOpen){
					ms.start(false);
				} else if (ms.isMSOpen){
					ms.BringToFront();
				}*/
			}
		});
		mp3Selectbtn.setBounds(503, 12, 500, 25);
		topMediaBtnPanel.add(mp3Selectbtn);
	}

	/**
	 * Set's video as the input String s from other classes
	 */
	protected static void setVideoSource(String string){ video = string; }

	/**
	 * Set's audio as the input String s from other classes
	 */
	protected static void setAudioSource(String s){ audio = s; }

	/**
	 * Changes the current video media being played
	 */
	//protected static void changeVideo(){ mp.playMedia(video);}

	/**
	 * returns the current video
	 */
	protected static String getVideoSource(){ return video; }

	/**
	 * returns the current audio
	 */
	protected static String getAudioSource(){ return audio; }
	
	/**
	 * Creates a rewind process
	 */
	protected class Rewind extends SwingWorker<Void,Void>{
		boolean rw;
		
		public Rewind(boolean rw){this.rw = rwd;}

		@Override
		protected Void doInBackground() throws Exception {
		    //will do rewind process if rw = true, if the time won't go into negative, and if it isn't cancelled
			/*while(rw && mp.getTime()- 8 >0 && !isCancelled()){
				mp.skip(-8);
			}*/
			return null;  
		}
		
		// when process is finished sets rwd to false and plays the video
		protected void done(){
			rwd = false;
			//mp.play();
		}
	}

}
