import java.awt.Dimension;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;

import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileFilter;
import javax.swing.JFileChooser;

// BY IDA DE SMET & ABBY THOMPSON
// MediaSelection, CommentaryAdd and Mainframe classes required
public class MediaSelection extends JPanel implements ActionListener {
	/**
	 * Initialized variables required
	 */
	private static final long serialVersionUID = 1L;
	private JButton mp3, festival;
	protected JFrame frame;
	protected boolean isvideo;
	private JFileChooser chooser;
	private String choosertitle;
	protected boolean close = false;
	protected String videoFile, musicFile;
	protected boolean isMSOpen = false;
	private JLabel lblA;
	protected JFrame psmp3 = new JFrame();
	protected JPanel pscontentPane;
	private String extension;
	private FileFilter filter;
	private boolean acceptableName = true;


	/**
	 * This constructor adds buttons onto a new frame's Panel, if it's mp3
	 */
	public MediaSelection(boolean video) {
		isvideo = video;
		if (!video){ // checks that the input is a video
			//__________________________________________________________________________ MP3 BUTTON
			mp3 = new JButton("Add mp3");
			mp3.addActionListener(this);
			add(mp3);

			//__________________________________________________________________________ FESTIVAL BUTTON
			festival = new JButton("Add Commentary");
			festival.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					CommentaryAdd.getWindows();
					CommentaryAdd.start();
				}});
			add(festival);
		}
	}

	//__________________________________________________________________________________ MP3 BUTTON FUNCTIONALITY POP UP
	/*
	 * actionPerformed for creating the JFileChooser
	 * changes according to whether the FileChooser is the video or audio
	 * (non-Javadoc)
	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */
	public void actionPerformed(ActionEvent e) {
		chooser = new JFileChooser(); 
		chooser.setCurrentDirectory(new java.io.File("."));
		chooser.setDialogTitle(choosertitle);

		//adding filter to the file chooser
		if (isvideo){ // checking only for avi/ mp4 files or directories
			videoFilter();
		} else {// checking only for mp3 files or directories
			audioFilter();
		}
		chooser.setFileFilter(filter); // sets filter according to if it's a video/ audio
		chooser.setAcceptAllFileFilterUsed(false);

		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
			if (isvideo){
				videoFile = chooser.getSelectedFile().getAbsolutePath(); // gets the chosen video file name
				Mainframe.setVideoSource(videoFile); // sets selected video from file chooser as main source
				Mainframe.changeVideo(); // changes main video to the chosen video file
			} else {
				musicFile = chooser.getSelectedFile().getAbsolutePath();// gets the chosen audio file name
				Mainframe.setAudioSource(musicFile);// sets selected video from file chooser as main source
				popupSubmitmp3(); // goes into a pop up asking to submit the mp3
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * @see javax.swing.JComponent#getPreferredSize()
	 */
	public Dimension getPreferredSize(){ return new Dimension(200, 200); }

	/**
	 * This function starts the frame if it is a video
	 */
	//_____________________________________________________________________________________ START FUNCTION TO ACTIVATE THE CLASS
	public void start(boolean video ){
		isMSOpen = true;
		isvideo = video;
		if(!video){
			frame = new JFrame("");
			frame.setBounds(530, 170, 0,0 );
			MediaSelection panel = new MediaSelection(video);
			frame.addWindowListener(
					new WindowAdapter() {
						public void windowClosing(WindowEvent e) {
							frame.setVisible(false);
							isMSOpen = false;
						}});
			frame.getContentPane().add(panel);
			frame.setSize(panel.getPreferredSize());
			frame.setVisible(true);
		}
	}

	//_______________________________________________________________________________________ COMFIRMATION OF MP3 SELECTION
	/**
	 * This constructor creates a pop up frame that checks the user wants to submit the audio file to the video
	 */
	public void popupSubmitmp3() {
		psmp3 = new JFrame();
		psmp3.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		psmp3.setBounds(450, 170, 360, 180);
		pscontentPane = new JPanel();
		pscontentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		psmp3.setContentPane(pscontentPane);
		pscontentPane.setLayout(null);

		//_______________________________________________________________________________________ CONFIRM AUDIO & VIDEO LABEL
		lblA = new JLabel("Do you want to submit this audio to this video?");
		lblA.setBounds(12, 43, 426, 31);
		pscontentPane.add(lblA);

		//_______________________________________________________________________________________ CANCEL BUTTON
		JButton btnCancel = new JButton("CANCEL");
		btnCancel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				psmp3.setVisible(false);
			}
		});
		btnCancel.setBounds(210, 100, 117, 25);
		pscontentPane.add(btnCancel);

		//_______________________________________________________________________________________ YES BUTTON
		JButton btnYes = new JButton("YES");
		btnYes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				if ((Mainframe.getAudioSource() != null)){ // checks an audio source is mentioned

					String userVideoName = nameFilePopup();//get file name to save video as

					if (userVideoName != null){
						nameWithExtensions(userVideoName); // checks if entered file contains .mp4 or .avi

						File f = new File(userVideoName + extension);// creates temp file named the userVideoName
						if (!MediaSelection.checkForSpaces(userVideoName)){ // check name doesn't contain spaces, symbols & isn't null
							errorMessage("No spaces in filename, Please Try Again");
							acceptableName = false;
						} else if (f.exists()) { // check name doesn't already exist
							errorMessage("Existing File, Please Try Again");
							acceptableName = false;
						} else {
							acceptableName = true;
						}

						if (acceptableName){
							//delete's audio off actual video
							String cmd1 = "ffmpeg -i " + Mainframe.getVideoSource() + " -an .vid.avi";
							ProcessBuilder pb1 = new ProcessBuilder("/bin/bash", "-c", cmd1);

							try {
								@SuppressWarnings("unused")
								Process p1 = pb1.start();
							} catch (IOException e1) { e1.printStackTrace(); }
							Mainframe.setVideoSource(".vid.avi"); // new audio-less video

							String videoPath = null;
							videoPath = System.getProperty("user.dir") + "/" +userVideoName + extension;

							//merges audio & video
							String cmd2 = "ffmpeg -i " + Mainframe.getVideoSource() + " -i " + Mainframe.getAudioSource() + " " + videoPath/* + userVideoName + extension*/; //combines the video and audio
							ProcessBuilder pb2 = new ProcessBuilder("/bin/bash", "-c", cmd2);
							try {
								Process p2 = pb2.start();
								errorMessage("Loading video, please wait");// popup here
								p2.waitFor(); // waits for process to be finished
								errorMessage("Finished merge, video is now playing");// popup here

								// closes popup here
							} catch (IOException | InterruptedException e1) {e1.printStackTrace();}

							//close all windows
							Mainframe.setVideoSource(videoPath/* + userVideoName + extension*/);
							Mainframe.changeVideo();
							psmp3.setVisible(false);

						}
					}
				}
			}

			private String File(String string) {
				// TODO Auto-generated method stub
				return null;
			}
		});
		btnYes.setBounds(20, 100, 117, 25);
		pscontentPane.add(btnYes);
		psmp3.setVisible(true);
	}

	/**
	 * brings JFrame frame to the front
	 */
	public void BringToFront() {
		frame.setVisible(true);
	}

	/**
	 * asks user for new file name pop up, with input as info
	 */
	private String nameFilePopup() {
		String info = JOptionPane.showInputDialog(this, "Save new video File as:");
		return info;
	}

	/**
	 * Checks that a video/ audio name that user inputs contains and avi or mp4 extension
	 */
	private void nameWithExtensions(String s){
		extension = ".mp4";
		if (s.endsWith(".avi")){
			extension = "";
		} else if (s.endsWith(".mp4")){
			extension = "";
		}
	}

	/**
	 * Checks if video/ audio name contains a space/ tab character
	 */
	protected static boolean checkForSpaces(String s){
		if (s == null| s.contains(" ") | s.contains("\t")){
			return false;
		}
		return true;
	}

	/**
	 * sets JChooser filter for videos, to directories + either .avi or .mp4 video files
	 */
	private void videoFilter(){
		filter = new FileFilter() {
			public String getDescription() {
				return "AVI videos (*.avi)";
			}
			@Override
			public boolean accept(File f) {
				if (f.isDirectory()) {
					return true;
				} else {
					String filename = f.getName().toLowerCase();
					return filename.endsWith(".avi") || filename.endsWith(".mp4") ;
				}
			}
		};
	}

	/**
	 * sets JChooser filter for audios to directories + .mp3 audio files
	 */
	private void audioFilter(){
		filter = new FileFilter() {
			public String getDescription() {
				return "MP3 audio (*.mp3)";
			}
			@Override
			public boolean accept(File f) {
				if (f.isDirectory()) {
					return true;
				} else {
					String filename = f.getName().toLowerCase();
					return filename.endsWith(".mp3");
				}
			}
		};
	}

	/**
	 * Launches an error message pop up to tell them of a specified string error
	 */
	private void errorMessage(String error){
		JOptionPane.showMessageDialog(this, error);
	}

}
