package GUI;
import java.awt.Canvas;
import java.awt.CardLayout;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;

import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.ActionEvent;

import javax.swing.ImageIcon;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import uk.co.caprica.vlcj.binding.LibVlc;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerFactory;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import functionality.Rewind;
import functionality.videoSliderBar;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;


public class Mainframe extends JFrame {

	private JButton playbutton, pausebutton, ffdbutton, rwdbutton, mp3Selectbtn, videoSelectbtn, mutebutton;
	private JSlider volSlider;
	private static EmbeddedMediaPlayer mp;
	static String video;
	private static String audio;
	protected static boolean ffd = false;
	protected static boolean rwd = true;
	protected int videoLength;
	final public ImageIcon rwd_Icon = new ImageIcon(getClass().getResource("/btnImages/rw.png"));
	final public ImageIcon ffd_Icon = new ImageIcon(getClass().getResource("/btnImages/ffd.png"));
	final public ImageIcon mute_Icon = new ImageIcon(getClass().getResource("/btnImages/mute.png"));
	final public ImageIcon play_Icon = new ImageIcon(getClass().getResource("/btnImages/play.png"));
	final public ImageIcon pause_Icon = new ImageIcon(getClass().getResource("/btnImages/pause.png"));
	final public ImageIcon vol_Icon = new ImageIcon(getClass().getResource("/btnImages/vol.png"));
	private JPanel panel;
static JSlider videoSlider;
	protected static videoSliderBar vsb;
	private boolean videoSliderStart = false;

	/**
	 * Initialize the contents of the frame.
	 */
	protected Mainframe(String[] args) {

		//Creates the main JFrame
		JFrame frame = new JFrame("mainAp");
		frame.setTitle("VIDIVOX : BY IDA");
		frame.setLocation(100,100);
		frame.setSize(1050,600);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);

		//creates main media player factory with canvas
		MediaPlayerFactory mpf = new MediaPlayerFactory();
		Canvas c = new Canvas();
		c.setBackground(Color.black);
		c.setBounds(100,500,1050,500);
		//creates panel that you put the video(canvas & factory) on
		JPanel mediaPanel = new JPanel();
		mediaPanel.setLayout(new BorderLayout());
		mediaPanel.add(c,BorderLayout.WEST);
		mediaPanel.setBounds(100,50,1050,600);
		frame.getContentPane().add(mediaPanel, BorderLayout.CENTER);

		panel = new JPanel();
		mediaPanel.add(panel, BorderLayout.SOUTH);
		panel.setLayout(new GridLayout(0, 1, 0, 0));

		//__________________________________________________________________________ VIDEO SLIDER INITIALIZED
		videoSlider = new JSlider();
		//System.out.println(videoSlider.getValue());
		/*videoSlider.addMouseListener(new MouseListener() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				if (!videoSliderStart){
					vsb = new videoSliderBar(mp.getLength(),true);
					vsb.execute();
					videoSliderStart = true;
				} else {
					videoSliderStart = false;
				}
			}


		});*/
		
		videoSlider.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if (getMp() != null){
					
				}
			}
		});
		videoSlider.setValue(0);
		panel.add(videoSlider);
		//PANEL FOR ALL SOUTH BUTTONS (PLAY, PAUSE, RW, FFD, MUTE, VOL SLIDER)
		JPanel p1 = new JPanel();
		p1.setBounds(100,900,105,200);
		frame.getContentPane().add(p1, BorderLayout.SOUTH);
		p1.setBackground(Color.black);
		//PANEL FOR ADDED AUDIO AND VIDEO AT NORTH
		JPanel p2 = new JPanel();
		p2.setBounds(200,1900,105,200);
		frame.getContentPane().add(p2, BorderLayout.NORTH);
		p2.setBackground(Color.black);

		//creates media player where video is played on
		setMp(mpf.newEmbeddedMediaPlayer());
		getMp().setVideoSurface(mpf.newVideoSurface(c));
		//mp.playMedia("big_buck_bunny_1_minute.avi"); // this is used so when testing we don't have to rechoose the video every time

		//__________________________________________________________________________ REWIND BUTTON
		rwdbutton = new JButton();
		rwdbutton.addActionListener(new ActionListener() { //GLITCHY AF
			public void actionPerformed(ActionEvent e) {
				Rewind.checkStatus();
			}
		});
		p1.setLayout(new GridLayout(0, 6, 0, 0));
		rwdbutton.setIcon(rwd_Icon);
		rwdbutton.setLocation(100, 900);
		rwdbutton.setBounds(50,10,50,10);
		p1.add(rwdbutton);

		//__________________________________________________________________________ PLAY BUTTON
		playbutton = new JButton();
		playbutton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//boolean once chosen a new video we have a boolean so that it 
				if (!getMp().isPlaying()){
					if (getMp() != null){ // checks video exists and mp is initialized correctly
						getMp().setRate((float) 1); // set normal rate (incase ffwding)
						Rewind.checkPlay();
					}
				} else { // if the video is playing
					if (getMp() != null){
						getMp().start();
						getMp().setRate((float) 1); // set normal rate (incase ffwding)
						Rewind.checkPlay();
					}
				}
			}
		});
		playbutton.setIcon(play_Icon);
		playbutton.setBounds(50,10,50,10);
		p1.add(playbutton);

		//__________________________________________________________________________ PAUSE BUTTON
		pausebutton = new JButton();
		pausebutton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				getMp().pause();
			}
		});
		pausebutton.setIcon(pause_Icon);
		pausebutton.setBounds(50,10,500,10);
		p1.add(pausebutton);

		//__________________________________________________________________________ FAST FORWARD BUTTON
		ffdbutton = new JButton();
		ffdbutton.addActionListener(new ActionListener() { 
			@Override
			public void actionPerformed(ActionEvent e) {
				if (ffd){
					ffd = false;
					getMp().setRate((float) 1);
				}else {
					ffd = true;
					getMp().setRate((float) 10);
				}
			};
		});
		ffdbutton.setIcon(ffd_Icon);
		ffdbutton.setBounds(50,10,50,10);
		p1.add(ffdbutton);

		//__________________________________________________________________________ MUTE BUTTON
		mutebutton = new JButton();
		mutebutton.setIcon(mute_Icon);
		mutebutton.addActionListener(new ActionListener() {
			int sliderValue = 50;
			public void actionPerformed(ActionEvent e) {
				if (getMp().isMute()){
					mutebutton.setIcon(mute_Icon);
					volSlider.setValue(sliderValue);
				} else {
					mutebutton.setIcon(vol_Icon);
					sliderValue = getMp().getVolume();
					volSlider.setValue(0);
				}
				getMp().mute();
			}
		});
		mutebutton.setBounds(50,10,500,10);
		p1.add(mutebutton);

		//__________________________________________________________________________ VIDEO SELECT TO PLAY BUTTON
		videoSelectbtn = new JButton("ADD VIDEO");
		videoSelectbtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				MediaSelection ms = new MediaSelection(true);
				getMp().pause();
				ms.actionPerformed(e);
			}
		});
		p2.setLayout(new GridLayout(0, 2, 0, 0));
		p2.add(videoSelectbtn);

		//__________________________________________________________________________ AUDIO SELECT TO PLAY BUTTON
		mp3Selectbtn = new JButton("ADD AUDIO");
		mp3Selectbtn.addActionListener(new ActionListener() {
			MediaSelection ms = new MediaSelection(false);
			public void actionPerformed(ActionEvent e) {
				getMp().pause();
				if (Mainframe.getVideoSource() == null){
					ChooseAudioTypeFrame newFrame = new ChooseAudioTypeFrame();
				} else if (!ms.isMSOpen){
					ms.start(false);
				} else if (ms.isMSOpen){
					ms.BringToFront();
				}
			}
		});
		mp3Selectbtn.setBounds(503, 12, 500, 25);
		p2.add(mp3Selectbtn);
		//__________________________________________________________________________ VOLUME SLIDER
		volSlider = new JSlider();
		volSlider.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				getMp().setVolume(volSlider.getValue());
				mutebutton.setIcon(mute_Icon);
			}
		});
		p1.add(volSlider);
	}

	/**
	 * Set's video as the input String s from other classes
	 */
	public static void setVideoSource(String string){ video = string; }

	/**
	 * Set's audio as the input String s from other classes
	 */
	public static void setAudioSource(String s){ audio = s; }

	/**
	 * Changes the current video media being played
	 */
	public static void changeVideo(){ 
		getMp().playMedia(video);
		videoSlider.setMaximum((int) getMp().getLength());
		videoSlider.setValue(0);
	}

	/**
	 * returns the current video
	 */
	public static String getVideoSource(){ return video; }

	/**
	 * returns the current audio
	 */
	public static String getAudioSource(){ return audio; }

	public static boolean getRwd(){ return rwd; }

	public static void setRwd(boolean rw){ rwd = rw; }

	public static void setFastForward(boolean fwd){ ffd = fwd; }

	public static EmbeddedMediaPlayer getMp() {
		return mp;
	}

	public static void setMp(EmbeddedMediaPlayer mp) {
		Mainframe.mp = mp;
	}
}
